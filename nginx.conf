user nginx; # Run nginx as non-root user (security best practice)
worker_processes auto; # Auto-detect CPU cores for optimal performance

error_log /var/log/nginx/error.log warn; # Log errors at 'warn' level or higher
pid /tmp/nginx.pid; # Process ID file location

events {
    worker_connections 1024; # Max simultaneous connections per worker (tune based on traffic)
}

http {
    include /etc/nginx/mime.types; # Load MIME type mappings (critical for serving JS/CSS correctly)
    default_type application/octet-stream; # Fallback MIME type for unknown files

    server_tokens off; # Hide nginx version in headers (prevents version-specific attacks)

    # Performance optimizations for static file serving
    sendfile on; # Efficient file transfer using kernel space (bypass user space)
    tcp_nopush on; # Send headers in one packet with sendfile (reduces network overhead)
    tcp_nodelay on; # Disable Nagle's algorithm for low-latency responses
    keepalive_timeout 65; # Keep connections alive for 65s to reuse TCP connections

    # Gzip compression for text-based assets (reduces bandwidth by 60-80%)
    gzip on; # Enable gzip compression
    gzip_disable "msie6"; # Disable for IE6 (buggy gzip support)
    gzip_vary on; # Add Vary: Accept-Encoding header for proper caching
    gzip_proxied any; # Compress responses for proxied requests
    gzip_comp_level 6; # Compression level 1-9 (6 is optimal balance of speed/size)
    gzip_buffers 16 8k; # Memory buffers for compression (16 buffers of 8KB each)
    gzip_http_version 1.1; # Only compress HTTP/1.1+ requests
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; # Compress these MIME types

    access_log /var/log/nginx/access.log; # Log all requests

    server {
        listen 80; # Listen on standard HTTP port
        server_name localhost; # Accept requests for 'localhost' hostname

        root /usr/share/nginx/html; # Document root directory
        index index.html; # Default file to serve

        # Security headers applied to ALL responses
        add_header X-Content-Type-Options "nosniff" always; # Prevent MIME type sniffing attacks
        add_header X-Frame-Options "DENY" always; # Prevent clickjacking (disallow iframes)
        add_header X-XSS-Protection "1; mode=block" always; # Enable browser XSS filter
        add_header Referrer-Policy "strict-origin-when-cross-origin" always; # Control referrer info sent to other sites
        # CSP: restricts which resources can be loaded (prevents XSS/injection attacks)
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://your-api-domain.com;" always;

        # SPA routing: serve index.html for all non-file requests
        location / {
            try_files $uri $uri/ /index.html; # Check file → directory → fallback to index.html
            add_header Cache-Control "no-cache, must-revalidate" always; # Force revalidation of index.html
        }

        # Aggressive caching for static assets (vite adds content hash to filenames)
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|otf|eot)$ {
            access_log off; # Don't log static asset requests (reduces I/O)
            add_header Cache-Control "public, max-age=31536000, immutable" always; # Cache for 1 year (files are immutable due to hash)
        }

        # Block access to hidden files (.git, .env, etc.)
        location ~ /\. {
            deny all; # Return 403 Forbidden
            access_log off; # Don't log blocked requests
            log_not_found off; # Don't log 404 errors for these
        }

        # Block access to config files that shouldn't be public
        location ~* (package\.json|package-lock\.json|tsconfig\.json|vite\.config\.ts)$ {
            deny all; # Return 403 Forbidden
        }
    }
}